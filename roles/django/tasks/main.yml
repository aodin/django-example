---
- name: server has a copy of the private deploy key
  become: no
  copy:
    src: "~/.ssh/{{ deploy_key }}"
    dest: "{{ home_dir }}/.ssh/id_rsa"
    mode: 0600

- name: server has a copy of the public deploy key
  become: no
  copy:
    src: "~/.ssh/{{ deploy_key }}.pub"
    dest: "{{ home_dir }}/.ssh/id_rsa.pub"
    mode: 0600

- name: latest ubuntu packages are installed
  become: yes
  apt:
    update_cache: yes
    state: latest
    pkg:
      - git
      - nginx
      - curl
      - build-essential
      - python3-dev
      - virtualenv

- name: git repository is up to date
  become: no
  git:
    repo: "{{ project_repo }}"
    accept_hostkey: yes
    dest: "{{ install_path }}"
  notify:
    - restart service
  tags:
    - update_only

- name: python requirements are installed in a python3 virtual environment
  become: no
  pip:
    requirements: "{{ requirements_file }}"
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: python3
  notify:
    - restart service
  tags:
    - update_only

- name: local settings for Django exist
  become: no
  template:
    src: "local_settings.py.j2"
    dest: "{{ django_path }}/{{ project_name }}/local_settings.py"
  notify:
    - restart service
  tags:
    - update_only

- name: django collectstatic is up to date
  become: no
  django_manage:
    command: collectstatic
    virtualenv: "{{ virtualenv_path }}"
    app_path: "{{ django_path }}"
  tags:
    - update_only

- name: django migrate is up to date
  become: no
  django_manage:
    command: migrate
    virtualenv: "{{ virtualenv_path }}"
    app_path: "{{ django_path }}"
  notify: restart service
  tags:
    - update_only

- name: the nginx site available is created
  become: yes
  template:
    src: "example.nginx.j2"
    dest: "/etc/nginx/sites-available/{{ domain }}"
  notify: restart nginx
  tags:
    - update_only

- name: the default nginx site is removed
  become: yes
  file:
    dest: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: restart nginx

- name: the nginx site available is symlinked to enabled
  become: yes
  file:
    src: "/etc/nginx/sites-available/{{ domain }}"
    dest: "/etc/nginx/sites-enabled/{{ domain }}"
    state: link
  notify: restart nginx

- name: the systemd script exists
  become: yes
  template:
    src: "gunicorn.j2"
    dest: "/etc/systemd/system/{{ project_name }}.service"
    mode: 0755
  notify: restart service

- name: the systemd service is enabled and not masked
  become: yes
  systemd:
    name: "{{ project_name }}"
    enabled: yes
    masked: no
  notify: restart service
